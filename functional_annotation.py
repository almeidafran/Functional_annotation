# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcFFND31H56qZrK9KCGBS9UPa-Mn7wmZ
"""

!pip install biopython
from Bio import Entrez
from Bio import SeqIO

# Configurar o e-mail para a API do NCBI (obrigatório)
Entrez.email = "francine.almeida@orcid"

def obter_nomes_genes(accessions):
    nomes_genes = {}
    for accession in accessions:
        handle = Entrez.efetch(db="nucleotide", id=accession, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        features = [feature for feature in record.features if feature.type == "gene"]
        if features:
            gene_info = []
            for feature in features:
                gene_name = feature.qualifiers.get("gene", ["Unknown"])[0]
                product = feature.qualifiers.get("product", ["Unknown"])[0]
                go_terms = [x.split(":")[1] for x in feature.qualifiers.get("db_xref", []) if x.startswith("GO:")]
                gene_info.append({"Gene": gene_name, "Product": product, "GO": go_terms})
            nomes_genes[accession] = gene_info
        else:
            nomes_genes[accession] = [{"Gene": "Nenhum gene encontrado", "Product": "Nenhum produto encontrado", "GO": []}]
    return nomes_genes



# Lista de accessions obtidos do BLASTN
#accessions = ["XM_010916517.3", "XM_010938833.3", "XM_029266338.1"]  # Substitua pelos seus accessions

#### OU caso os acessions estejam em um arquivo
import pandas as pd

# Carregar o arquivo CSV
df = pd.read_csv('acession_or_id_gene_file.csv', sep= ";")
print(df)

# Extrair os accessions da segunda coluna
accessions = df.iloc[:, 1].tolist()  # Assumindo que a segunda coluna tem índice 1

# Imprimir a lista de accessions
print(accessions)

# Obter os nomes dos genes associados aos accessions, incluindo os identificadores GO e a anotação funcional
nomes_genes = obter_nomes_genes(accessions)

# Imprimir os resultados
for accession, genes_info in nomes_genes.items():
    print(f"Accession: {accession}")
    for gene_info in genes_info:
        gene_name = gene_info["Gene"]
        product = gene_info["Product"]
        go_terms = ", ".join(gene_info["GO"]) if gene_info["GO"] else "Nenhum termo GO encontrado"
        print(f"Gene: {gene_name}, Product: {product}, GO: {go_terms}")
    print()

# Criar DataFrame e exportar para CSV
import pandas as pd

# Criar um DataFrame a partir do dicionário nomes_genes
df = pd.DataFrame(columns=['Accession', 'Gene', 'Product', 'GO'])

for accession, genes_info in nomes_genes.items():
    for gene_info in genes_info:
        df = df.append({'Accession': accession, 'Gene': gene_info["Gene"], 'Product': gene_info["Product"], 'GO': ", ".join(gene_info["GO"])}, ignore_index=True)

# Exportar o DataFrame para um arquivo CSV
df.to_csv('nomes_genes_GO_product.csv', index=False)